stages:
  - codecheck
  - test

include:
  - project: espressif/shared-ci-dangerjs
    ref: master
    file: danger.yaml
run-danger-mr-linter:
  stage: codecheck
  variables:
    ENABLE_CHECK_UPDATED_CHANGELOG: 'false'


# WORKFLOW RULES
# ------------------------------------------------------------------------------------------------------
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: '$CI_COMMIT_BRANCH'
# ------------------------------------------------------------------------------------------------------


# TEMPLATES
# ------------------------------------------------------------------------------------------------------
.base_template:
  image: python:3.8-bookworm
  tags:
    - build
    - internet
  before_script:
    - pip install -e .[dev] --prefer-binary

.venv_template:
  image: python:3.8-bookworm
  tags:
    - build
    - internet
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - python -m pip install -e .[dev] --prefer-binary
# --------------------------------------------------------------------------------------------------


# JOBS
# ------------------------------------------------------------------------------------------------------

# CODE CHECK BY PRE-COMMIT HOOKS
pre-commit_hooks_MR:
  extends: .base_template
  stage: codecheck
  script:
    - apt-get update && apt-get install -y -q git
    - echo "Merge request is from ${CI_COMMIT_REF_NAME} into ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    - git fetch origin ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} ${CI_COMMIT_REF_NAME}
    - export from_sha=$(git merge-base HEAD origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME})
    - echo "Checking changes from ${from_sha} to ${CI_COMMIT_SHA}:"
    - git log --oneline ${from_sha}..${CI_COMMIT_SHA}
    - echo "Modified files:"
    - git diff-tree --no-commit-id --name-only -r ${from_sha} ${CI_COMMIT_SHA}
    - echo "Running pre-commit:"
    - pre-commit run --from ${from_sha} --to ${CI_COMMIT_SHA}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
# ------------------------------------------------------------------------------------------------------

# FORMATTING


# TESTS
test_kconfserver:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfserver/
    - ./test_kconfserver.py

test_gen_kconfig_doc:
  extends: .base_template
  stage: test
  script:
    - cd test/gen_kconfig_doc/
    - ./test_target_visibility.py
    - ./test_kconfig_out.py

test_kconfgen:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfgen/
    - ./test_kconfgen.py

test_kconfcheck:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfcheck/
    - ./test_kconfcheck.py

# TESTS in VENV
test_kconfserver_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfserver/
    - ./test_kconfserver.py

test_gen_kconfig_doc_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/gen_kconfig_doc/
    - ./test_target_visibility.py
    - ./test_kconfig_out.py

test_kconfgen_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfgen/
    - ./test_kconfgen.py

test_kconfcheck_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfcheck/
    - ./test_kconfcheck.py
