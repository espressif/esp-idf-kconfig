stages:
  - codecheck
  - test
  - coverage
  - build_docs
  - deploy_docs

include:
  - project: espressif/shared-ci-dangerjs
    ref: master
    file: danger.yaml
run-danger-mr-linter:
  stage: codecheck
  variables:
    ENABLE_CHECK_UPDATED_CHANGELOG: "false"

# WORKFLOW RULES
# ------------------------------------------------------------------------------------------------------
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: "$CI_COMMIT_BRANCH"
# ------------------------------------------------------------------------------------------------------

# COMMON TEMPLATES
# ------------------------------------------------------------------------------------------------------
.common_template:
  image: python:${PYTHON_VERSION}-bookworm
  tags:
    - build
    - internet
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.13"]
  variables:
    RUN_TESTS: "coverage run -m pytest -vv"
    COVERAGE_PROCESS_START: "${CI_PROJECT_DIR}/pyproject.toml"
    COVERAGE_RCFILE: "${CI_PROJECT_DIR}/pyproject.toml"
    COVERAGE_FILE: "$CI_PROJECT_DIR/.coverage.${CI_JOB_NAME}-${CI_NODE_INDEX:-0}"
    PYTHONUNBUFFERED: "1"
  artifacts:
    when: always # get artifacts no matter what test results are
    paths:
      - test/*/.coverage.*
      - .coverage.*

.base_template:
  extends: .common_template
  before_script:
    - pip install -e .[dev] --prefer-binary

.venv_template:
  extends: .common_template
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - python -m pip install -e .[dev] --prefer-binary
# --------------------------------------------------------------------------------------------------

# JOBS
# ------------------------------------------------------------------------------------------------------
# CODE CHECK BY PRE-COMMIT HOOKS
pre-commit_hooks_MR:
  extends: .base_template
  stage: codecheck
  script:
    - apt-get update && apt-get install -y -q git
    - echo "Merge request is from ${CI_COMMIT_REF_NAME} into ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    - git fetch origin ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} ${CI_COMMIT_REF_NAME}
    - export from_sha=$(git merge-base HEAD origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME})
    - echo "Checking changes from ${from_sha} to ${CI_COMMIT_SHA}:"
    - git log --oneline ${from_sha}..${CI_COMMIT_SHA}
    - echo "Modified files:"
    - git diff-tree --no-commit-id --name-only -r ${from_sha} ${CI_COMMIT_SHA}
    - echo "Running pre-commit:"
    - pre-commit run --from ${from_sha} --to ${CI_COMMIT_SHA}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $PYTHON_VERSION == "3.8"' #  run only on oldest python version supported

# ------------------------------------------------------------------------------------------------------

# TESTS
# ------------------------------------------------------------------------------------------------------
test_kconfserver:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfserver/
    - $RUN_TESTS

test_kconfiglib:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfiglib/
    - $RUN_TESTS

test_menuconfig:
  extends: .base_template
  stage: test
  script:
    - cd test/menuconfig/
    - $RUN_TESTS

test_gen_kconfig_doc:
  extends: .base_template
  stage: test
  script:
    - cd test/gen_kconfig_doc/
    - $RUN_TESTS

test_kconfgen:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfgen/
    - $RUN_TESTS

test_kconfcheck:
  extends: .base_template
  stage: test
  script:
    - cd test/kconfcheck/
    - $RUN_TESTS

# TESTS in VENV
test_kconfserver_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfserver/
    - $RUN_TESTS

test_kconfiglib_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfiglib/
    - $RUN_TESTS

test_menuconfig_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/menuconfig/
    - $RUN_TESTS

test_gen_kconfig_doc_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/gen_kconfig_doc/
    - $RUN_TESTS

test_kconfgen_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfgen/
    - $RUN_TESTS

test_kconfcheck_venv:
  extends: .venv_template
  stage: test
  script:
    - cd test/kconfcheck/
    - $RUN_TESTS
# -----------------------------------------------------------------------------------------------------

# CODE COVERAGE
# -----------------------------------------------------------------------------------------------------
merge_coverage:
  stage: coverage
  image: python:3.13-bookworm
  tags:
    - build
    - internet
  variables:
    COVERAGE_RCFILE: "$CI_PROJECT_DIR/pyproject.toml"
  artifacts:
    when: always
    paths:
      - coverage-merged.xml
      - html_report
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage-merged.xml
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    - pip install -e .[dev] --prefer-binary

    # Combine ALL raw data files exactly once (from repo root)
    - coverage combine

    # Generate reports from the merged data
    - coverage xml -o coverage-merged.xml -i
    - coverage report --precision=2
    - coverage html -d html_report --precision=2


# ------------------------------------------------------------------------------------------------------

# BUILD AND DEPLOY DOCS
# ------------------------------------------------------------------------------------------------------
build_docs:
  stage: build_docs
  image: python:3.12-bookworm
  tags:
    - build_docs
  rules:
    - changes:
        - "docs/**/*"
  needs: []
  artifacts:
    when: always
    paths:
      - docs/_build/*/*/*.txt
      - docs/_build/*/*/html/*
    expire_in: 4 days
  script:
    - pip install -e .[docs] --prefer-binary
    - cd docs
    - build-docs -l en

.deploy_docs_template:
  stage: deploy_docs
  image: python:3.12-bookworm
  tags:
    - deploy
  needs:
    - build_docs
  before_script:
    - source ${CI_PROJECT_DIR}/docs/utils.sh
    - add_doc_server_ssh_keys $DOCS_DEPLOY_PRIVATEKEY $DOCS_DEPLOY_SERVER $DOCS_DEPLOY_SERVER_USER
    - export GIT_VER=$(git describe --always)
    - pip install -e .[docs] --prefer-binary
  script:
    - deploy-docs

deploy_docs_preview:
  extends:
    - .deploy_docs_template
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
    - changes:
        - "docs/**/*"
  variables:
    TYPE: "preview"
    DOCS_BUILD_DIR: "${CI_PROJECT_DIR}/docs/_build/"
    DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PREVIEW_PRIVATEKEY"
    DOCS_DEPLOY_SERVER: "$DOCS_PREVIEW_SERVER"
    DOCS_DEPLOY_SERVER_USER: "$DOCS_PREVIEW_USER"
    DOCS_DEPLOY_PATH: "$DOCS_PREVIEW_PATH"
    DOCS_DEPLOY_URL_BASE: "$DOCS_PREVIEW_URL_BASE"

deploy_docs_production:
  extends:
    - .deploy_docs_template
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      changes:
      - "docs/**/*"
  variables:
    TYPE: "production"
    DOCS_BUILD_DIR: "${CI_PROJECT_DIR}/docs/_build/"
    DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PROD_PRIVATEKEY"
    DOCS_DEPLOY_SERVER: "$DOCS_PROD_SERVER"
    DOCS_DEPLOY_SERVER_USER: "$DOCS_PROD_USER"
    DOCS_DEPLOY_PATH: "$DOCS_PROD_PATH"
    DOCS_DEPLOY_URL_BASE: "$DOCS_PROD_URL_BASE"
