[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "esp-idf-kconfig"
authors = [
    {name = "Espressif Systems"},
]
description = "Kconfig tooling for esp-idf"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.7"
keywords = ["espressif", "embedded", "project", "configuration", "kconfig"]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Environment :: Console",
    "Topic :: Software Development :: Embedded Systems",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
]
dynamic = ['version']
dependencies = [
    "kconfiglib>=13.7.1",
    "windows-curses; platform_system=='Windows'"
]

[project.urls]
Homepage = "https://github.com/espressif/esp-idf-kconfig"

[project.optional-dependencies]
dev = [
    "commitizen",
    "pre-commit",
    "pexpect",
]

[tool.setuptools.packages]
find = {}

[tool.setuptools.dynamic]
version = {attr = "esp_idf_kconfig.__version__"}


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version = "1.4.1"
version_scheme = "semver"
version_files = ["esp_idf_kconfig/__init__.py"]
bump_message = "ci: bump version $current_version â†’ $new_version"
update_changelog_on_bump = true

[tool.mypy]
    disallow_incomplete_defs = false # Disallows defining functions with incomplete type annotations
    disallow_untyped_defs    = false # Disallows defining functions without type annotations or with incomplete type annotations
    ignore_missing_imports   = true  # Suppress error messages about imports that cannot be resolved
    python_version           = "3.9" # Specifies the Python version used to parse and check the target program
    warn_no_return           = true  # Shows errors for missing return statements on some execution paths
    warn_return_any          = true  # Shows a warning when returning a value with type Any from a function declared with a non- Any return type
